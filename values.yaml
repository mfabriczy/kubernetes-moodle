# Default values for kubernetes-moodle.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

app:
  name: Moodle

#############
# Deployments
#############
ngnixDeploy:
  name: nginx
  repository: nginx
  tag: 1.10.2-alpine
  pullPolicy: Always
  port: 80

##########
# Services
##########
service:
  nginx:
    name: nginx
    port: 80

###########
# ConfigMap
###########
nginxConfigMap:
  mountPath:
    defaultConf: /etc/nginx/conf.d

################
# Moodle Ingress
################
moodleIngress:
  enableAccessLog: true
  host:
  path: /

##########################
# NGINX Ingress Controller
##########################
nginx-ingress:
  controller:
    kind: DaemonSet
    nodeSelector:
      # The default value below is a label automatically attached to nodes by kops. Change to whatever you want to insert
      # the ingress controller into specific nodes.
      kops.k8s.io/instancegroup: nodes
    publishService:
      enabled: true

#############
# ExternalDNS
#############
external-dns:
  podAnnotations:
    # A role's ARN to be annotated to the pod(s), the role to be assumed using kube2iam.
    # For the Principle of least privilege: service isolation when pods use AWS resources.
    # For more info see: https://github.com/jtblin/kube2iam
    iam.amazonaws.com/role:
  rbac:
    create: true
  domainFilters:
  txtPrefix:

##########
# kube2iam
##########
kube2iam:
  host:
    iptables: true
    # Container networking - set to kops (cbr0) by default
    interface: cbr0
  rbac:
    create: true

##############
# cert-manager
##############
cert-manager:
  podAnnotations:
    iam.amazonaws.com/role:
  ingress:
    acmeChallengeType: dns01
    acmeDns01Provider: route53
  clusterIssuer:
    name: letsencrypt-prod
    email:
    server: https://acme-v02.api.letsencrypt.org/directory
    region:

##############
# Spinnaker
##############
spinnaker:
  timeZone: "Australia/Adelaide"
  artifact:
    s3:
      accessKey:
      secretKey:
  spinnakerFeatureFlags:
    - artifacts
    - pipeline-templates
  oauth:
    # The Client ID, Client Secret provided when adding Spinnaker to GitHub as an OAuth app.
    clientID:
    clientSecret:
    provider: "github"
    # API endpoint for Spinnaker's REST API service. Provide the full base URL.
    apiBaseURL: "https://api.spinnaker.com"

    # If you have a proxy fronting and terminating SSL requests, the following link might be needed:
    # https://www.spinnaker.io/setup/security/authentication/oauth/#network-architecture-and-ssl-termination
    redirectURI:

    # The full base URL of proxy/load balancer that's fronting UI requests for Spinnaker
    uiBaseURL: "https://spinnaker.com"
  ingress:
    enabled: true
    # Same as uiBaseURL (above).
    host: spinnaker.com
    tls:
    - secretName: spinnaker.com
      hosts:
      - spinnaker.com
    annotations:
      kubernetes.io/ingress.class: nginx
      # External DNS to create an A record in Route 53.
      external-dns.alpha.kubernetes.io/hostname: "spinnaker.com"
      # cert-manager to issue and manage a TLS certificate for this service.
      certmanager.k8s.io/cluster-issuer: letsencrypt-prod
      certmanager.k8s.io/acme-challenge-type: dns01
      certmanager.k8s.io/acme-dns01-provider: route53

  # By default, Spinnaker is configured without any authentication and authorisation - anyone is able access Spinnaker.
  # An ingress is used to expose Spinnaker's API (Spinnaker API Gateway). In this case, used for OAuth 2.0 - GitHub as the provider.
  ingressGate:
    enabled: true
    host: api.spinnaker.com
    tls:
    - secretName: api.spinnaker.com
      hosts:
      - api.spinnaker.com
    annotations:
      kubernetes.io/ingress.class: nginx
      # API endpoint for Spinnaker's REST API service. Provide the full base URL
      # e.g., https://api.spinnaker.com - do not include the HTTP protocol in the value.
      external-dns.alpha.kubernetes.io/hostname: "api.spinnaker.com"
      certmanager.k8s.io/cluster-issuer: letsencrypt-prod
      certmanager.k8s.io/acme-challenge-type: dns01
      certmanager.k8s.io/acme-dns01-provider: route53

  halyard:
    additionalScripts:
      enabled: true
      configMapName: halyard
      configMapKey: config.sh
